services:



  read:
    image: grafana/loki:2.9.5
    command: "-config.file=/etc/loki/config.yml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      executor:
        aliases:
          - loki

  write:
    image: grafana/loki:2.9.5
    command: "-config.file=/etc/loki/config.yml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.9.5
    volumes:
      - ../observability/promtail/promtail-local-config.yaml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - gateway
    extends:
      file: common-config.yaml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yaml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yaml
      service: network-deploy-service
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yaml
      service: network-deploy-service

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yaml
      service: network-deploy-service

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    container_name: keycloak
    ports:
      - "7080:7080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev --http-port 7080"
    extends:
      file: common-config.yaml
      service: network-deploy-service

  kafka:
    image: docker.io/bitnami/kafka:3.7
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    extends:
      file: common-config.yaml
      service: network-deploy-service

  redis:
    image: redis
    hostname: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    extends:
      file: common-config.yaml
      service: network-deploy-service


  publisherdb:
    container_name: publisherdb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: publisherdb
    extends:
      file: common-config.yaml
      service: microservice-postgres-config

  proxydb:
    container_name: proxydb
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: proxydb
    extends:
      file: common-config.yaml
      service: microservice-postgres-config

  selenium:
    privileged: true
    extends:
      file: common-config.yaml
      service: network-deploy-service
    hostname: selenium
    networks:
      - executor
    healthcheck:
      test: "curl --fail --silent http://localhost:4444/wd/hub/status | jq -e '.value.ready' | grep true || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    image: selenium/standalone-chrome:3.141.59-20210607
    container_name: selenium
    ports:
      - "4444:4444"
    shm_size: 2g


  configserver:
    image: "victortarasov/executor-config-service:v10"
    container_name: configserver-ms
    ports:
      - "8084:8084"
    healthcheck:
      test: "curl --fail --silent localhost:8084/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yaml
      service: microservice-base-config


  eurekaserver:
    image: "victortarasov/executor-eureka-service:v10"
    container_name: eurekaserver-ms
    ports:
      - "8085:8085"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8085/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yaml
      service: microservice-config-server
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8085/eureka/
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"


  worker:
    image: "victortarasov/executor-worker-service:v10"
    container_name: worker-ms
    ports:
      - '8081:8081'
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      selenium:
        condition: service_healthy
    extends:
      file: common-config.yaml
      service: microservice-eureka-config
    environment:
      SPRING_APPLICATION_NAME: "worker"
      EXECUTORSERVICE_COMMON_WEBDRIVEREXECUTABLE: "http://selenium:4444/wd/hub"
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"

  publisher:
    image: "victortarasov/executor-publisher-service:v10"
    container_name: publisher-ms
    ports:
      - '8082:8082'
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      publisherdb:
        condition: service_healthy
    extends:
      file: common-config.yaml
      service: microservice-eureka-config
    environment:
      SPRING_APPLICATION_NAME: "publisher"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://publisherdb:5432/publisherdb"
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"

  proxy:
    image: "victortarasov/executor-proxy-service:v10"
    container_name: proxy-ms
    ports:
      - '8083:8083'
    healthcheck:
      test: "curl --fail --silent localhost:8083/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      publisherdb:
        condition: service_healthy
    extends:
      file: common-config.yaml
      service: microservice-eureka-config
    environment:
      SPRING_APPLICATION_NAME: "proxy"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://proxydb:5432/proxydb"

  gatewayserver:
    image: "victortarasov/executor-gateway-service:v10"
    container_name: gatewayserver-ms
    ports:
      - "8080:8080"
    depends_on:
      worker:
        condition: service_healthy
      publisher:
        condition: service_healthy
      proxy:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: gatewayserver
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:7080/realms/master/protocol/openid-connect/certs"
      SPRING_DATA_REDIS_HOST: "redis"
    extends:
      file: common-config.yaml
      service: microservice-eureka-config
volumes:
  kafka_data:
    driver: local
networks:
  executor:
    driver: "bridge"
    external: true
